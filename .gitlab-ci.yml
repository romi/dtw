image: continuumio/miniconda3

conda_build:
  stage: build
  script:
#    - conda update --all
    # Install conda build requirements in the base environment:
    - conda install conda-build conda-verify git
    # Build the package and export it in a `conda-bld` folder:
    - mkdir conda-bld
    - conda build . --output-folder conda-bld/
  artifacts:
    paths:
      - conda-bld
  only:
    - master

anaconda_upload:
  stage: deploy
  script:
#    - conda update --all
    - conda install conda-build conda-verify anaconda-client
    # Convert linux package for OSX-64:
    - conda convert -p osx-64 conda-bld/linux-64/dtw* --output-dir conda-bld/
    # Convert linux package for WIN-64:
    - conda convert -p win-64 conda-bld/linux-64/dtw* --output-dir conda-bld/
    # Upload all conda packages:
    - anaconda --token=$ANACONDA_TOKEN --verbose upload conda-bld/linux-64/dtw* --user romi-eu --force
    - anaconda --token=$ANACONDA_TOKEN --verbose upload conda-bld/osx-64/dtw* --user romi-eu --force
    - anaconda --token=$ANACONDA_TOKEN --verbose upload conda-bld/win-64/dtw* --user romi-eu --force
  only:
    - master

gitlab_pages:
  stage: deploy
  script:
#    - conda update --all
    # Install DTW in a conda environment with development dependencies:
    - conda env create --file conda/env/dtw_dev.yaml
    - conda init bash
    - source ~/.bashrc
    - conda activate dtw
    - python -m pip install .
    # Build the documentation:
#    - make html
    - sphinx-build -b html doc/source/ doc/build/html
    # Publish it:
    - mv doc/build/html ../public
  artifacts:
    paths:
      - public

unitary_tests:
  stage: test
  script:
#    - conda update --all
    # Install DTW in a conda environment with dependencies:
    - conda env create --file conda/env/dtw.yaml
    - conda init bash
    - source ~/.bashrc
    - conda activate dtw
    - python -m pip install .
    - conda install -c conda-forge nose2
    # Run unitary tests with nose2:
    - /opt/conda/envs/dtw/bin/nose2 --start-dir test
